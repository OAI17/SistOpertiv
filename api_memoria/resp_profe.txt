
ejercicio1:
-int i : stack o registro
-register int s = 0 : que porfavor vaya a un registro, en caso de que no haya un registro va al stack
-int *b = calloc.. : b esta en el stack pero a lo que apunta b esta en el heap 
-argc,argv: esta en el stack, tanto el puntero como lo que apunta (los valores los pone el kernel al cargar el programa en memoria)
-segmento de programa esta en no-read y no-write
-int a[N] (definido como programa) esta en un segmento que se almacenan las variables globales
-.bss: almacena variables globales y variables statucas de las funciones  
#define N 200: no esta en ningun lado porque es un remplazo

ejercicio2:
-get: no hay garantina del largo que va a pisar 
-a s le falta el \0 entonces nunca termina el string
-strdup pierde la referenfica al puntero del malloc y hace un memory leak
-mal pedida la memoria; 

ejercicio3:
sys-call: brk()
a)falso, es una libreria de c
b)falso, no siempre llama a la sys-call para pedir memoria, solo lo hace cuando falta espacio o no entra en la free list
c)verdadero
d)	a)falso, no es una sys-call
	b)falso
	c)verdadero
e)falso, depende de la estructura interna del malloc.ademas en los casos que malloc(x) pida memoria y justo haya un bloque libre tiene costo 0

ejercicio4:
FALTA

ejercicio5:
FALTA

ejercicio6:
-statica : si o si con una tabla
-dinamica: ayuda del hardware

ejercicio7:
a)erdadero: porque si no lo fueran cualquier proceso pudiera tocar la memoria que quiera
b)falso, uno por cada cpu

ejercicio8:
FALTA 
culpa del 16386 que se pasa por 2 b necesita otra pagina

ejercicio9:
FALTA

ejercicio10:
TDB es una cache 
( (0.95*10) + (0.05*120) ) = Promedio 

ejercicio11:
FALTA
cada acceco a memoria virtual necesita un acceso a la tabla de segmentacion 
